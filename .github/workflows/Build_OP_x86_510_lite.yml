name: Build_x86_510_lite

on: 
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
  schedule:
    - cron: 30 9 * * *

# 点赞☆Star触发编译
#  watch:
#    types: [started]

jobs:
  Build_x86_510_lite:
    runs-on: ubuntu-20.04
    steps:
    - name: Clone Repository
      uses: actions/checkout@v2

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get update -y
        sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons
        wget -qO - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | sed 's/python-/python3-/g' | /bin/bash
        pip install aligo
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/xiangfeidexiaohuo/lede
        REPO_BRANCH: X86
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        cp -f ../diy/lean1.sh ./
        chmod +x ./lean1.sh && ./lean1.sh

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

        ./scripts/feeds install -a

        cp -f ../diy/lean2.sh ./        
        chmod +x ./lean2.sh && ./lean2.sh       
        echo 'https://static.adguard.com/adguardhome/release/AdGuardHome_linux_${Arch}.tar.gz' > feeds/xiangfeidexiaohuo/luci-app-adguardhome/root/usr/share/AdGuardHome/links.txt
        sed -i "s/hostname='OpenWrt'/hostname='AE86-X86'/g" package/base-files/files/bin/config_generate
        
        sed -i "s/KERNEL_PATCHVER:=*.*/KERNEL_PATCHVER:=5.4/g" target/linux/x86/Makefile
        sed -i "s/KERNEL_TESTING_PATCHVER:=*.*/KERNEL_TESTING_PATCHVER:=5.10/g" target/linux/x86/Makefile
        
    - name: Configuration Customization - Build_x86_510_lite
      env:
        CONFIG_FILE: './configs/x86_510_lite.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        make -j$(nproc) V=s

    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        rm -rf ./X86_Out
        mkdir -p ./X86_Out/
        cp -a openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz ./X86_Out/X86_64-OpenWrt-Lite-5.10-$(date +%Y%m%d)_YaoDao.img.gz
               
    - name: Upload Firmwares
      uses: actions/upload-artifact@main
      with:
        name: X86-OpenWrt-5.10-lite
        path: X86_Out/*.img.gz
        
    - name: Generate Tag & Release Name
      id: generate_name
      run: |
        time=$(date +%Y%m%d%H%M)
        release_tag="$time"
        release_name="软路由(X86_64)精简版-OpenWrt-5.10内核-$(date +%Y%m%d)"
        echo "##[set-output name=release_name;]$release_name"
        echo "##[set-output name=release_tag;]$release_tag"        

    - name: Create Release & Upload
      uses: ncipollo/release-action@v1
      with:
        artifacts: X86_Out/*.img.gz 
        name: ${{ steps.generate_name.outputs.release_name }}
        tag: ${{ steps.generate_name.outputs.release_tag }}
        token: ${{ secrets.GITHUB_TOKEN }}
                         
    - name: Upload Aliyun
      run: |  
        cd X86_Out
        echo "解压ZIP即可得到固件，请自动忽略META-INF文件夹。" > 说明.txt
        jar cf X86-Lite-5.10-$(date +%Y%m%d).zip *
        cd ..              
        python diy/aliupload.py --token "${{ secrets.ALIYUN_TOKEN }}" --uploadFloder "OpenWrt/X86-Lite/5.10" --file "X86_Out/X86-Lite-5.10-$(date +%Y%m%d).zip"  
                
